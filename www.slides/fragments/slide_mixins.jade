

- get_unit = function(unit_num) {
  - var extract = (unit_num+'').match(/^unit_([0-9]*)/);
  - if(extract){
    - unit_num = extract[1];
  - };
  - var d = getCollection("documents").findAll({url:'/units/unit_'+unit_num+'.html'},[{year:-1,sort_order:1}]).toJSON();
  - if (document.units && document.units.indexOf(unit_num)==-1) {
    - document.units.push(unit_num);
  - }
  - var unit = d[0]
  - return unit;
- };

//- wrap a list so that it has a next() method that cycles through the elements
- wrap_list = function(lst) {
-   var res = { list:lst, counter:-1 };
-   res.next = function() {
-     res.counter += 1;
-     if( res.counter >= res.list.length ) {
-       res.counter = 0;
-     }
-     return res.list[res.counter];
-   }
-   res.first = function() { return res.list[0]; }
-   return res;
- };

- get_images = function(folder) {
-   var images = getFilesAtPath('img/bkg/'+folder+'/',[{basename:1}]).toJSON();
-   var sorter = function(a,b) { return a.basename.localeCompare(b.basename) };
-   images.sort(sorter);
-   return wrap_list(images)
- };

//- make a range of numbers, from http://stackoverflow.com/questions/3746725/create-a-javascript-array-containing-1-n/3748833#3748833
- function range(start, end) {
-     var foo = [];
-     for (var i = start; i <= end; i++) {
-         foo.push(i);
-     }
-     return foo;
- }


//- ----------------
//- for lecture files
//- ----------------

//- render a unit as part of a larger slideshow document
mixin render_unit(unit)
  //- first if the unit is coded as images, do a slide for each image
  if unit.layout.replace('.html.jade','') == 'deck_slides_img'
    mixin display_images_as_slides(unit)
  else
    != unit.contentRenderedWithoutLayouts


//- create title slide for a lecture
//- param p contains document and images (an array of images to use)
mixin title_slide(p)
  .notes.notes-header-tex \title {Origins of Mind: Lecture Notes \\ #{p.document.title}}
  .notes.notes-header-tex &nbsp;
  .notes.notes-header-tex \maketitle
  #title-slide.slide
    - var img = p.images.first()
    - var _ = p.images.next(); //avoid re-using first image 
    img.bkg(src='#{img.url}')
    .spacer &nbsp;
    - var low = false
      if img.filename.indexOf('.low.') != -1
        - low = true
    .fade-in
      .title-block(style="#{low ? 'position:relative; top:325px' : ''}"): .title-container
          h1.title1.fade-in Origins of Mind
          h1.title2.fade-in #{p.document.title}
          h3.email.fade-in s.butterfill@warwick.ac.uk
    if p.document.weburl
      .words
        span(style="position:relative;top:250px;left:450px;").white-box.big.center #{p.document.weburl}
    .handout \def \ititle {Origins of Mind}
    .handout \def \isubtitle {#{p.document.title}}
    .handout &nbsp;
    .handout \
    .handout &nbsp;
    .handout \begin{center}
    .handout {\Large
    .handout \textbf{\ititle}: \isubtitle
    .handout }
    .handout &nbsp;
    .handout \iemail %<s.butterfill@warwick.ac.uk>
    .handout \end{center}


//- title slides for subsections
//- param p contains p.unit and p.images (an array of images)
mixin section(p)
  section(id="#{p.unit ? p.unit.basename : ''}").slide
    - var low = false
    if p.images
      - var img = p.images.next()
      img.bkg(src='#{img.url}')
      if img.filename.indexOf('.low.') != -1
        - low = true
    .spacer &nbsp;
    .title-block(style="#{low ? 'position:relative; top:425px' : ''}"): .title-container
        h2.title1 #{p.unit ? p.unit.title : p.title}


mixin handout(p)
    .handout &nbsp;
    .handout \section{#{p.unit ? p.unit.title : p.title}}


mixin insert_unit(p)
  - d = get_unit(p.unit)
    if p.title_slide
        +section({unit:d, images:p.images})
    if p.handout !== false
        +handout({unit:d})
    .notes.notes-header-tex &nbsp;
    .notes.notes-header-tex \section{#{d.title}}
    +render_unit(d)



//- -------------
//- mixins to create standard types of slide
//- -------------


mixin slide(p)
  section.slide
    if p && p.bkg
      img.bkg(src='/img/#{p.bkg}')
    .words
      .container_12: .grid_12
        block

mixin slide_middle()
  section.slide
    .container_12: .grid_12
      .words: .middle
        block

mixin slide_img(filename)
  section.slide
    img.bkg(src='/img/#{filename}')
    block

mixin left_half()
  .grid_6.words.left-half
    block
mixin right_half(p)
  - p = p || {step:false}
  .grid_6.words.invert.right-half(class="#{ p.step ? 'hide' : '' }")
    div(style='padding-left:1em;')
      if p.step
        +show('.right-half-white, .right-half')
      block
    
mixin run_across()
  .clear
  //- .container_12: .grid_12: .words
  .words
    block
  .container_12
  
mixin slide_rh_white(p)
  - p = p || {step:false}
  section.slide
    .right-half-white(style="z-index:-22;", class="#{ p.step ? 'hide' : '' }")
    .container_12
      block

//- create a sequence of slides from a list of images
mixin slides_from_img(filenames)
  each filename in filenames
    .slide.nodim
      img.bkg.nodim(src="/img/#{filename}")

//- render images associated with a unit as slides
mixin display_images_as_slides(unit)
  each f in getFilesAtPath('img/'+unit.basename+'/',[{basename:1}]).toJSON()
    section.slide
      img(src=f.url)





//- -------------
//- mixins to create elements
//- -------------

//- see also +clip to modify the clip as an animation
mixin img_clip(filename, theClip)
  div(style='position:relative;')
    img(src='/img/#{filename}', style="clip: #{theClip}; position: absolute; max-width:720px; max-height:550px;")




//- -------------
//- use the new slide-clone plugin instead!!!!
//- recall slides (can also preview)
//- parameter should be a selector for the slide, e.g. #categorical_perception_slide
//- -------------
mixin recall(selector)
  .slide.anim-addclass(data-what="#{selector}",data-class="recall",data-scope=".deck-container")

mixin unrecall(selector)
  .slide.anim-removeclass(data-what="#{selector}",data-class="recall",data-scope=".deck-container")






//- -------------
//- animation: show, hide and steps
//- -------------
//- create a slide with .step2.hide, .step3.hide and then call mixin steps(3) to reveal them slide by slide

//- use this after applying one or more of the proof animation mixins (because they use anim-continue)
mixin anim_end()
  .slide.anim-addclass(data-what="#notanelement", data-class="")


//- clip an image
mixin clip(what, theClip)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-attribute(data-what="#{thing}", data-attr="clip:#{theClip}")
  mixin anim_end()


//- draw a connector between elements
mixin connect(p)
  .slide.anim-connect(data-from='#{p.from}', data-to='#{p.to}', data-from-anchor="#{p.fromAnchor||'LeftMiddle'}",data-to-anchor='#{p.toAnchor || "RightMiddle"}',data-color="#{p.color || 'hotpink'}")

mixin blur_(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{thing}",data-class="blur-text")

mixin blur(what)
  +blur_(what)
  +anim_end()

mixin unblur_(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-removeclass(data-what="#{thing}",data-class="blur-text")

mixin unblur(what)
  +unblur_(what)
  +anim_end()


mixin line-through_(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-attribute(data-what="#{thing}", data-attr="text-decoration:line-through")
mixin line-through(what)
  +line-through_(what)
  mixin anim_end()

//- show something(s)
//- param what is a string or an array of jquery identifiers
//- param scope (optional) is a seclector that specifies where to look for the what
mixin show_(what,scope)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-removeclass(data-what="#{thing}",data-class="hide",data-scope="#{scope ? scope : ''}")

mixin show(what,scope)
  +show_(what,scope)
  mixin anim_end()
  
  
mixin hide(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{thing}",data-class="hide")
  mixin anim_end()

mixin collapse_(what, speed)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    if speed
      .slide.anim-continue.anim-collapse(data-what="#{thing}",data-dur="#{speed}")
    else
      .slide.anim-continue.anim-collapse(data-what="#{thing}")
mixin collapse(what, speed)
  +collapse_(what, speed)
  mixin anim_end()


mixin remove_(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{thing}",data-class="remove-me")
mixin remove(what)
  +remove_(what)
  mixin anim_end()


mixin unremove(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-removeclass(data-what="#{thing}",data-class="remove-me")
  mixin anim_end()

mixin showhide(showwhat, hidewhat)
  if typeof(showwhat)==='string'
    - showwhat = [showwhat]
  if typeof(hidewhat)==='string'
    - hidewhat = [hidewhat]
  each thing in showwhat
    .slide.anim-continue.anim-removeclass(data-what="#{thing}",data-class="hide")
  each thing in hidewhat
    .slide.anim-continue.anim-addclass(data-what="#{thing}",data-class="hide")
  mixin anim_end()

mixin showremove(showwhat, hidewhat)
  if typeof(showwhat)==='string'
    - showwhat = [showwhat]
  if typeof(hidewhat)==='string'
    - hidewhat = [hidewhat]
  each thing in showwhat
    .slide.anim-continue.anim-removeclass(data-what="#{thing}",data-class="hide")
  each thing in hidewhat
    .slide.anim-continue.anim-addclass(data-what="#{thing}",data-class="remove-me")
  mixin anim_end()

mixin dim(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{thing}",data-class="dim")
  mixin anim_end()

mixin undim(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-removeclass(data-what="#{thing}",data-class="dim")
  mixin anim_end()

mixin nodim(what)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{thing}",data-class="nodim")
  mixin anim_end()


mixin fade_(what, dur)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    if dur
      .slide.anim-continue.anim-fade(data-what="#{thing}", data-dur="#{dur}")
    else
      .slide.anim-continue.anim-fade(data-what="#{thing}")
mixin fade(what, dur)
  +fade_(what, dur)
  mixin anim_end()

mixin unfade(what, dur)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    if dur
      .slide.anim-continue.anim-show(data-what="#{thing}", data-dur="#{dur}")
    else
      .slide.anim-continue.anim-show(data-what="#{thing}")
  mixin anim_end()


mixin words-bkg(what, color, container)
  if typeof(what)==='string'
    - what = [what]
  if !color
    - color = 'pink'
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{container ? container : ''} #{thing}",data-class="bkg-words-highlight-#{color}")
  mixin anim_end()

mixin words-bkg-faint(what, color, container)
  if typeof(what)==='string'
    - what = [what]
  if !color
    - color = 'pink'
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{container ? container : ''} #{thing}",data-class="bkg-words-highlight-faint-#{color}")
  mixin anim_end()

mixin words-bkg-remove_(what, color, container)
  if typeof(what)==='string'
    - what = [what]
  if !color
    - color = 'pink'
  each thing in what
    .slide.anim-continue.anim-removeclass(data-what="#{container ? container : ''} #{thing}",data-class="bkg-words-highlight-#{color}")

mixin words-bkg-remove(what, color, container)
  +words-bkg-remove_(what, color, container)
  mixin anim_end()



mixin words-bkg-remove-all(what, container)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-removeclass(data-what="#{container ? container : ''} #{thing}",data-class="bkg-words-highlight-*")
  mixin anim_end()



mixin row-bkg(what, color, container)
  if typeof(what)==='string'
    - what = [what]
  if !color
    - color = 'grey'
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{container ? container : ''} #{thing}",data-class="bkg-#{color}-row")
    if color=='white'
      .slide.anim-continue.anim-addclass(data-what="#{container ? container : ''} #{thing}", data-class="invert")
  mixin anim_end()

mixin row-bkg-remove_(what, color, container)
  if typeof(what)==='string'
    - what = [what]
  if !color
    - color = 'grey'
  each thing in what
    .slide.anim-continue.anim-removeclass(data-what="#{container ? container : ''} #{thing}",data-class="bkg-#{color}-row")
    if color=='white'
      .slide.anim-continue.anim-removeclass(data-what="#{container ? container : ''} #{thing}", data-class="invert")

mixin row-bkg-remove(what, color, container)
  +row-bkg-remove_(what, color, container)
  +anim_end()

mixin invert_(what, container)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-addclass(data-what="#{container ? container : ''} #{thing}", data-class="invert")
    .slide.anim-continue.anim-addclass(data-what="#{container ? container : ''} #{thing}",data-class="bkg-words-highlight-white")
mixin invert(what, container)
  +invert_(what, container)
  mixin anim_end()

mixin uninvert_(what, container)
  if typeof(what)==='string'
    - what = [what]
  each thing in what
    .slide.anim-continue.anim-removeclass(data-what="#{container ? container : ''} #{thing}", data-class="invert")
    .slide.anim-continue.anim-removeclass(data-what="#{container ? container : ''} #{thing}",data-class="bkg-words-highlight-white")
mixin uninvert(what, container)
  +uninvert_(what, container)
  mixin anim_end()


//- add a slide for the specified step
mixin step(num, container)
  //- uses deck.anim extension to unhide elements
  .slide.anim-removeclass(data-what="#{container ? container : ''} .step#{num}",data-class="hide")

//- add slides for num steps, where @param num is the total number of steps 
mixin steps(start_num, end_num, container)
  //- sort out params
  if !end_num
    - end_num = start_num
    - start_num = 2
  if typeof(end_num) == typeof('')
    - container = end_num
    - end_num = start_num
    - start_num = 2
  //- do it
  - var counter = start_num //start at slide 2
  while counter <= end_num
    mixin step(counter, container)
    - counter += 1




//- -------------
//- logically valid df
//- -------------
mixin df_valid(p)
  if !p
    - p = {}
  div.white-box(style="width:230px;position:absolute;top:20px;left:500px;")
    p(style="padding: 0 0.3em;") An argument is 
      strong logically valid 
      | just if 
      span.the_df(style="#{p.reveal ? 'opacity: 0' : ''}") there’s 
        span.no-possible-situation no possible situation 
        span in which 
        span.premises-true the premises are true 
        span and 
        span.conclusion-false the conclusion false.
  if p.reveal
    .slide.anim-show(data-what=".the_df")

//- sound df
mixin df_sound_argument(p)
  if !p
    - p = {}
  div.white-box(style="width:230px;position:absolute;top:350px;left:500px;")
    p(style="padding: 0 0.3em;") An argument is 
      strong sound  
      | just if it is logically valid and all its premises are true.



//- -------------
//- truth tables
//- -------------
//- param sentences is an array of sentences
//- param values is an array of arrays of values, one per sentence
//- e.g. mixin truth-table(['A ∨ B','¬A'],[['T','T','T','F'],['F','F','T','T']])
mixin truth-table(sentences, values)
  - var len = values[0].length
  - var cols = ['A']
  if values[0].length > 2
      - cols.push('B')
  if values[0].length > 4
    - cols.push('C')
  if values[0].length > 8
    - cols.push('D')
  table.truth-table
    //- header row
    tr
      each letter, i in cols
        td
          span(class='col-#{i+1}') #{letter}
      each sentence,i4 in sentences 
        td.result-col
          span(class='result-col-#{i4+1}') #{sentence}
    each val, i in values[0]
      tr(class="row-#{i+1}")
        - var structure = i.toString(2)
        //- pad
        - while( structure.length < cols.length)  structure = "0" + structure
        each letter, i2 in cols
          td
            if i2 == 0
              span.highlight-hook &#8203;
            span #{(structure[i2] === "0" ? "T" : "F")}
        each value_set, i3 in values
          td.result-col
            span(class='result-col-#{i3+1}') #{value_set[i]}

mixin tt-highlight-cols(cols, color, container)
  each col in cols
    div.slide.anim-continue.anim-addclass(data-what="#{container ? container : ''} table.truth-table tr td:nth-child(#{col})",data-class="bkg-words-highlight-#{color}")
  mixin anim_end()

mixin tt-highlight-rows(rows, container)
  each row in rows
    .slide.anim-continue.anim-addclass(data-what="#{container ? container : ''} .truth-table .row-#{row} .highlight-hook", data-class="bkg-grey-row")
  mixin anim_end()



//- -------------
//- proofs
//- -------------

//- create a proof.  The proof may include subproofs
//- e.g.:
//-  - var prf = {premises:['P ∧ Q', 'Q ∧ R'], lines:[['P','∧Elim', [1]],['R', '∧Elim',[2]]]}
//-  mixin fitch_proof(prf)
mixin fitch_proof(prf,start_line)
  if !start_line
    - start_line = 1
  table.fitch-proof
    - var premises = prf['premises']
    - var line_no = start_line 
    each premise in premises
      tr(class="premise row-#{line_no}")
        td(class="#{(line_no-(start_line-1)) == premises.length ? 'last-premise' : ''}")
            span.highlight-hook &#8203;
        td #{prf.no_line_numbers ? '' : line_no+'.'}
        td
          p.sentence #{premise}
        td
        - line_no += 1
    - var lines = prf['lines']
    each line in lines
      if line.__proto__ == Object().__proto__
        //- subproof
        - var subproof = line
        //- *todo: won't work for deeper nested subproofs
        - var subproof_length = subproof.lines.length + 1 
        if subproof.mylength
          subproof_length = subproof.mylength
        - var subproof_start_line_no = line_no
        - line_no += (subproof_length)
        tr
          td 
          td(colspan="3")
            mixin fitch_proof(subproof, subproof_start_line_no)
            
      if line.__proto__ == [].__proto__
        //- ordinary line
        tr(class="line row-#{line_no}")
          td(class="#{line_no == premises.length ? 'last-premise premise' : 'premise'}")
              span.highlight-hook &#8203;
          td #{prf.no_line_numbers ? '' : line_no+'.'}
          td
            span.sentence #{line[0]}
          td #{line[1]}
            if line[2]
              | : 
              - var ctr = 1
              span.citations
                each cited_line in line[2]
                  span(class="citation-#{ctr}") #{cited_line}
                    if line[2].length !== ctr
                      | ,
                  - ctr += 1
        - line_no += 1



//- animations to highlight rows / sentences / reference numbers in proofs
//- nb: these use anim-continue so you can do several highlights in one slide
//- nb: after calling one or more of these highlights, use mixin anim_end

//- highlight a row of a proof
mixin highlight_row(row_num)
  .slide.anim-addclass.anim-continue(data-what=".fitch-proof .row-#{row_num} .highlight-hook", data-class="bkg-grey-row")
mixin unhighlight_row(row_num)
  .slide.anim-removeclass.anim-continue(data-what=".fitch-proof .row-#{row_num} .highlight-hook", data-class="bkg-grey-row")

//- highlights just one of the numbers in a rule of proof
mixin highlight_citation(row_num, citation_num)
  .slide.anim-addclass.anim-continue(data-what=".fitch-proof .row-#{row_num} .citation-#{citation_num}", data-class="bkg-words-highlight-red")
mixin unhighlight_citation(row_num, citation_num)
  .slide.anim-removeclass.anim-continue(data-what=".fitch-proof .row-#{row_num} .citation-#{citation_num}", data-class="bkg-words-highlight-red")

//- highlights the specified line as a line highlighted
mixin highlight_cited_sentence(row_num)
  .slide.anim-addclass.anim-continue(data-what=".fitch-proof .row-#{row_num} .sentence", data-class="bkg-words-highlight-red")
mixin unhighlight_cited_sentence(row_num)
  .slide.anim-removeclass.anim-continue(data-what=".fitch-proof .row-#{row_num} .sentence", data-class="bkg-words-highlight-red")



//- ----------
//- draw things
//- ----------
mixin colour-box(colour, size)
  .box(style="background-color:#{colour};width:#{size}px;height:#{size}px;margin-left:auto;margin-right:auto;border:#{size/5}px solid grey;")
    block

mixin colour-ball(colour, size)
  .box(style="background-color:#{colour};width:#{size}px;height:#{size}px;margin-left:auto;margin-right:auto;border:#{size/5}px solid grey;border-radius:50%;")
    block



